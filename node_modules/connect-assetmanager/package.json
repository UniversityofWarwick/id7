{
  "name": "connect-assetmanager",
  "description": "Middleware for Connect (node.js) for handling your static assets.",
  "version": "0.0.28",
  "author": {
    "name": "Mathias Pettersson",
    "email": "mape@mape.me"
  },
  "keywords": [
    "build",
    "assets",
    "css",
    "javascript"
  ],
  "engines": [
    "node"
  ],
  "directories": {
    "lib": "./lib"
  },
  "main": "./lib/assetmanager",
  "repository": [
    {
      "type": "git",
      "url": "http://github.com/mape/connect-assetmanager.git"
    }
  ],
  "dependencies": {
    "request": ">=0.10.0",
    "step": ">=0.0.3"
  },
  "readme": "# connect-assetmanager\n\nMiddleware for Connect (node.js) for handling your static assets.\n\n<img src=\"http://mape.me/assetmanager.png\" alt=\"\">\n\n## Installation\n\nVia [npm](http://github.com/isaacs/npm):\n\n    $ npm install connect-assetmanager\n\n## Handy pre/post hooks\n\nMake sure to check out [connect-assetmanager-handlers](http://github.com/mape/connect-assetmanager-handlers) for useful hooks you can use (inline base64 for image, vendor prefix fixes for example)\n\n## What does it allow you to do?\n* Merge and minify CSS/javascript files\n* Auto regenerates the cache on file change so no need for restart of server or manual action.\n* Run pre/post manipulation on the files\n  * __Use regex to match user agent so you can serve different modified versions of your packed assets based on the requesting browser.__\n* Supplies a reference to the modified dates for all groups through assetManager().cacheTimestamps[groupName] as well as md5 hashes assetManager().cacheHashes[groupName] which can be used for cache invalidation in templates.\n* Wildcard add files from dir\n\n### Nifty things you can do with the pre/post manipulation\n* __Replace all url(references to images) with inline base64 data which remove all would be image HTTP requests.__\n* Strip all IE specific code for all other browsers.\n* Fix all the vendor prefixes (-ms -moz -webkit -o) for things like border-radius instead of having to type all each and every time.\n\n## Speed test (it does just fine)\n### Running with\n    > connect app -n 4\n\n### Common data\n    Concurrency Level:      240\n    Complete requests:      10000\n    Failed requests:        0\n    Write errors:           0\n\n### Small (reset.css)\n    Document Path:          /static/test/small\n    Document Length:        170 bytes\n    \n    Time taken for tests:   0.588 seconds\n    Total transferred:      4380001 bytes\n    HTML transferred:       1700000 bytes\n    Requests per second:    17005.50 [#/sec] (mean)\n    Time per request:       14.113 [ms] (mean)\n    Time per request:       0.059 [ms] (mean, across all concurrent requests)\n    Transfer rate:          7273.84 [Kbytes/sec] received\n\n### Larger (jQuery.js)\n    Document Path:          /static/test/large\n    Document Length:        100732 bytes\n    \n    Time taken for tests:   10.817 seconds\n    Total transferred:      1012772490 bytes\n    HTML transferred:       1009913368 bytes\n    Requests per second:    924.51 [#/sec] (mean)\n    Time per request:       259.597 [ms] (mean)\n    Time per request:       1.082 [ms] (mean, across all concurrent requests)\n    Transfer rate:          91437.43 [Kbytes/sec] received\n\n## Options\n### path (string) - required\nThe path to the folder containing the files.\n\n    path: __dirname + '/'\n\n### files (array) - required\nAn array of strings containing the filenames of all files in the group.\n\nIf you want to add all files from the path supplied add '*'. It will insert the files at the position of the *.\nYou can also use a regexp to match files or use external urls.\n\n    files: ['http://code.jquery.com/jquery-latest.js', /jquery.*/ , '*', 'page.js']\n\n### route (regex as string) - required\nThe route that will be matched by Connect.\n\n    route: '/\\/assets\\/css\\/.*\\.css'\n\n### dataType (string), ['javascript', 'css']\nThe type of data you are trying to optimize, 'javascript' and 'css' is built into the core of the assetManager and will minify them using the appropriate code.\n\n    dataType: 'css'\n\n### preManipulate (array containing functions)\nThere are hooks in the assetManager that allow you to programmaticly alter the source of the files you are grouping.\nThis can be handy for being able to use custom CSS types in the assetManager or fixing stuff like vendor prefixes in a general fashion.\n\n    'preManipulate': {\n        // Regexp to match user-agents including MSIE.\n        'MSIE': [\n            generalManipulation\n            , msieSpecificManipulation\n        ],\n        // Matches all (regex start line)\n        '^': [\n            generalManipulation\n            , fixVendorPrefixes\n            , fixGradients\n            , replaceImageRefToBase64\n        ]\n    }\n\n### postManipulate (array containing functions)\nSame as preManipulate but runs after the files are merged and minified.\n\nThe functions supplied look like this:\n\n    function (file, path, index, isLast, callback) {\n        if (path.match(/filename\\.js/)) {\n            callback(null, file.replace(/string/mig, 'replaceWithThis'));\n        } else {\n            callback(null, file);\n        }\n    }\n### serveModify (req, res, response, callback)\nAllows you do to modify the cached response on a per request basis.\n\n    function(req, res, response, callback) {\n        if (externalVariable) {\n            // Return empty asset\n            response.length = 1;\n            response.contentBuffer = new Buffer(' ');\n        }\n        callback(response);\n    }\n### stale (boolean)\nIncase you want to use the asset manager with optimal performance you can set stale to true.\n\nThis means that there are no checks for file changes and the cache will therefore not be regenerated. Recommended for deployed code.\n\n### debug (boolean)\nWhen debug is set to true the files will not be minified, but they will be grouped into one file and modified.\n\n## Example usage\n    var sys = require('sys');\n    var fs = require('fs');\n    var Connect = require('connect');\n    var assetManager = require('connect-assetmanager');\n    var assetHandler = require('connect-assetmanager-handlers');\n    \n    var root = __dirname + '/public';\n    \n    \n    var Server = module.exports = Connect.createServer();\n    \n    Server.use('/',\n        Connect.responseTime()\n        , Connect.logger()\n    );\n    \n    var assetManagerGroups = {\n        'js': {\n            'route': /\\/static\\/js\\/[0-9]+\\/.*\\.js/\n            , 'path': './public/js/'\n            , 'dataType': 'javascript'\n            , 'files': [\n                'jquery.js'\n                , 'jquery.client.js'\n            ]\n        }, 'css': {\n            'route': /\\/static\\/css\\/[0-9]+\\/.*\\.css/\n            , 'path': './public/css/'\n            , 'dataType': 'css'\n            , 'files': [\n                'reset.css'\n                , 'style.css'\n            ]\n            , 'preManipulate': {\n                // Regexp to match user-agents including MSIE.\n                'MSIE': [\n                    assetHandler.yuiCssOptimize\n                    , assetHandler.fixVendorPrefixes\n                    , assetHandler.fixGradients\n                    , assetHandler.stripDataUrlsPrefix\n                ],\n                // Matches all (regex start line)\n                '^': [\n                    assetHandler.yuiCssOptimize\n                    , assetHandler.fixVendorPrefixes\n                    , assetHandler.fixGradients\n                    , assetHandler.replaceImageRefToBase64(root)\n                ]\n            }\n        }\n    };\n\n    var assetsManagerMiddleware = assetManager(assetManagerGroups);\n    Server.use('/'\n        , assetsManagerMiddleware\n        , Connect.static(root)\n    );\n",
  "readmeFilename": "README.md",
  "_id": "connect-assetmanager@0.0.28",
  "dist": {
    "shasum": "3f61573d51fffaeae2ae3142acb2570633acc6fa"
  },
  "_from": "connect-assetmanager@",
  "_resolved": "https://registry.npmjs.org/connect-assetmanager/-/connect-assetmanager-0.0.28.tgz"
}
